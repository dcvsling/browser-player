
export const KEYBOARD_CODES = {
  Backspace: 8,
  Tab: 9,
  Enter: 13,
  Shift: 16,
  Ctrl: 17,
  Alt: 18,
  Break: 19,
  CapsLock: 20,
  Escape: 27,
  PageUp: 33,
  Space: 32,
  PageDown: 34,
  End: 35,
  Home: 36,
  ArrowLeft: 37,
  ArrowUp: 38,
  ArrowRight: 39,
  ArrowDown: 40,
  PrintScreen: 44,
  Insert: 45,
  Delete: 46,
  num0: 48,
  num1: 49,
  num2: 50,
  num3: 51,
  num4: 52,
  num5: 53,
  num6: 54,
  num7: 55,
  num8: 56,
  num9: 57,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  LeftWindowKey: 91,
  RightWindowKey: 92,
  Selectkey: 93,
  Num0: 96,
  Num1: 97,
  Num2: 98,
  Num3: 99,
  Num4: 100,
  Num5: 101,
  Num6: 102,
  Num7: 103,
  Num8: 104,
  Num9: 105,
  Multiply: 106,
  Add: 107,
  Subtract: 109,
  DecimalPoint: 110,
  Divide: 111,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  NumLock: 144,
  ScrollLock: 145,
  SemiColon: 186,
  Equal: 187,
  Comma: 188,
  Dash: 189,
  Period: 190,
  ForwardSlash: 191,
  OpenBracket: 219,
  BackSlash: 220,
  CloseBraket: 221,
  SingleQuote: 222,
} as const;

export type KeyboardEvents = typeof KeyboardEvent extends { [P in keyof typeof KeyboardEvent]: infer V } ? { [P in V & number]: () => void } : never;

export type KeyName = keyof typeof KEYBOARD_CODES;

export type KeyboardEventMap<TContext> = Partial<{ [P in KeyName]: (context: TContext) => void } extends { [P in string]: (context: TContext) => void } ? { [P in string]: (context: TContext) => void } : never >;

export const MOUSE_CODES = {
  none: 0,
  left: 1,
  right: 2,
  middle: 4,
  button1: 8,
  button2: 16,
  mask: 31
} as const;

export function isKeyName(key: any): key is KeyName {
  return typeof key === 'string' && Object.keys(KEYBOARD_CODES).indexOf(key) >= 0;
}
